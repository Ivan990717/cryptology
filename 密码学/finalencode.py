from pyDes import CBC, des, PAD_PKCS5
from DES import *
from DES_BOX import *
from RSA1 import *
from RC4 import *
import DES_BOX
import gmpy2
from gmpy2 import mpz
import binascii
import re
import codecs
import os
import base64


"""
Alice向bob传输一份大文件，文件内容通过des加密
密钥为liyifan
之后将密钥通过RSA加密传给bob
RSA中的信息如下
p= 93457755829692484240951744324664091138683640406047490075486558303341904255304647780283935021926398354316205463246010393646833284433952023011401510566252890516870002215992318180444175852670361572627896291119494303542214691020606217486327746626178732094818991497331017242257635830108317152300326728437236466427
q= 154173535280918969331703671452025024686466471504331537670796459326403097057010063873034465103235913451721955258406854959887594355273216947636543755245155572926102282223422238875207799900188701390224100775151357437775746739598949804025610550705971695377275760244324388012279718316999481321335598176051996894091
n= 93457755829692484240951744324664091138683640406047490075486558303341904255304647780283935021926398354316205463246010393646833284433952023011401510566252890516870002215992318180444175852670361572627896291119494303542214691020606217486327746626178732094818991497331017242257635830108317152300326728437236466427 × 154173535280918969331703671452025024686466471504331537670796459326403097057010063873034465103235913451721955258406854959887594355273216947636543755245155572926102282223422238875207799900188701390224100775151357437775746739598949804025610550705971695377275760244324388012279718316999481321335598176051996894091 = 14408712615684604702090555181342454422741112949172920463586775164467917662967597228661204576143178140128983889949486408285418302793304304803905079724977744042377605596020818768204164635491160641780295534819217289221541361028461055322187415411162314639819726499752547389991359274865944756361548533695525228213307624020373872946756443005089550631376730597206247036226130580756581665775523466022522729266447360812287103300071780058120458915612730213385269127710222256391473418084764789585016043424715091229234353109729496933222038288355327540273694513271073267712144770874063415212501236279812804603833939637527796182857
d=n÷e= 11355130524358430560653874818895815890653112006940857776573992762781924889100057397590580800900908869514652180418863756582164037149527453720983407199530807395833171701836874555445148467184147349232780014073621535220015689067213277771035226378316237034307478741157202307067362311797554278904454867758769656632865747661336175436775504850890804759986084637755176326380016890311959046739945462039163605161803106811034154543085281698314835029646923525106387274659351736854054756099837478213476286175992495047104931945810032605573367129229856835085633841048773774397944724173377006855805401290720480898003678302820936152833
"""
e = 65537
p = 93457755829692484240951744324664091138683640406047490075486558303341904255304647780283935021926398354316205463246010393646833284433952023011401510566252890516870002215992318180444175852670361572627896291119494303542214691020606217486327746626178732094818991497331017242257635830108317152300326728437236466427
q = 154173535280918969331703671452025024686466471504331537670796459326403097057010063873034465103235913451721955258406854959887594355273216947636543755245155572926102282223422238875207799900188701390224100775151357437775746739598949804025610550705971695377275760244324388012279718316999481321335598176051996894091
n = 14408712615684604702090555181342454422741112949172920463586775164467917662967597228661204576143178140128983889949486408285418302793304304803905079724977744042377605596020818768204164635491160641780295534819217289221541361028461055322187415411162314639819726499752547389991359274865944756361548533695525228213307624020373872946756443005089550631376730597206247036226130580756581665775523466022522729266447360812287103300071780058120458915612730213385269127710222256391473418084764789585016043424715091229234353109729496933222038288355327540273694513271073267712144770874063415212501236279812804603833939637527796182857
d = 11355130524358430560653874818895815890653112006940857776573992762781924889100057397590580800900908869514652180418863756582164037149527453720983407199530807395833171701836874555445148467184147349232780014073621535220015689067213277771035226378316237034307478741157202307067362311797554278904454867758769656632865747661336175436775504850890804759986084637755176326380016890311959046739945462039163605161803106811034154543085281698314835029646923525106387274659351736854054756099837478213476286175992495047104931945810032605573367129229856835085633841048773774397944724173377006855805401290720480898003678302820936152833

# 对输入的大文件进行RC4加密
print("------------------------------综合设计加密------------------------------")
key = input("请输入RC4的密钥：")
cipherText = open('D:\\密码学课程设计\\finalplain.txt', 'r', encoding='utf-8')
text = cipherText.read()
cipherText.close()
text = text.replace("\n", "")
d = RC4Encrypt(text, key)
try:
    text = open('D:\\密码学课程设计\\encode.txt', 'w', encoding='utf-8')
    text.write(d)
    text.close()
    print("------------------------------文件加密成功------------------------------")
except IOError:
    print('文件加解密出错！！！')

key = encrypt(e, n, key)

print("key=", key)
try:
    text = open('D:\\密码学课程设计\\finalkey.txt', 'w', encoding='utf-8')
    text.write(str(key))
    text.close()
    print("------------------------------密钥加密成功------------------------------")
except IOError:
    print('文件加解密出错！！！')
