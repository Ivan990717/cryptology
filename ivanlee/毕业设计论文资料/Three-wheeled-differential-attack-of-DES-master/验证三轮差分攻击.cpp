#include<iostream>
#include<cstdlib>
#include<string.h>
#include<cstring>
int F[64];
int*k1(int F[],int n);
using namespace std;
int IP[64]={58,50,42,34,26,18,10,2,60,52,44,36,28,20,12,4,62,54,46,38,30,22,14,6,64,56,48,40,32,24,16,8,57,49,41,33,25,17,9,1,59,51,43,35,27,19,11,3,61,53,45,37,29,21,13,5,63,55,47,39,31,23,15,7};
int IPr[64]={40,8,48,16,56,24,64,32,39,7,47,15,55,23,63,31,38,6,46,14,54,22,62,30,37,5,45,13,53,21,61,29,36,4,44,12,52,20,60,28,35,3,43,11,51,19,59,27,34,2,42,10,50,18,58,26,33,1,41,9,49,17,57,25};
int PC[56]={57,49,41,33,25,17,9,1,58,50,42,34,26,18,10,2,59,51,43,35,27,19,11,3,60,52,44,36,63,55,47,39,31,23,15,7,62,54,46,38,30,22,14,6,61,53,45,37,29,21,13,5,28,20,12,4};
int PCr[48]={14,17,11,24,1,5,3,28,15,6,21,10,23,19,12,4,26,8,16,7,27,20,13,2,41,52,31,37,47,55,30,40,51,45,33,48,44,49,39,56,34,53,46,42,50,36,29,32};
int E[48]={32,1,2,3,4,5,4,5,6,7,8,9,8,9,10,11,12,13,12,13,14,15,16,17,16,17,18,19,20,21,20,21,22,23,24,25,24,25,26,27,28,29,28,29,30,31,32,1};
int S[8][4][16]={{{14,4,13,1,2,15,11,8,3,10,6,12,5,9,0,7},{0,15,7,4,14,2,13,1,10,6,12,11,9,5,3,8},{4,1,14,8,13,6,2,11,15,12,9,7,3,10,5,0},{15,12,8,2,4,9,1,7,5,11,3,14,10,0,6,13}}\
,{{15,1,8,14,6,11,3,4,9,7,2,13,12,0,5,10},{3,13,4,7,15,2,8,14,12,0,1,10,6,9,11,5},{0,14,7,11,10,4,13,1,5,8,12,6,9,3,2,15},{13,8,10,1,3,15,4,2,11,6,7,12,0,5,14,9}}\
,{{10,0,9,14,6,3,15,5,1,13,12,7,11,4,2,8},{13,7,0,9,3,4,6,10,2,8,5,14,12,11,15,1},{13,6,4,9,8,15,3,0,11,1,2,12,5,10,14,7},{1,10,13,0,6,9,8,7,4,15,14,3,11,5,2,12}}\
,{{7,13,14,3,0,6,9,10,1,2,8,5,11,12,4,15},{13,8,11,5,6,15,0,3,4,7,2,12,1,10,14,9},{10,6,9,0,12,11,7,13,15,1,3,14,5,2,8,4},{3,15,0,6,10,1,13,8,9,4,5,11,12,7,2,14}}\
,{{2,12,4,1,7,10,11,6,8,5,3,15,13,0,14,9},{14,11,2,12,4,7,13,1,5,0,15,10,3,9,8,6},{4,2,1,11,10,13,7,8,15,9,12,5,6,3,0,14},{11,8,12,7,1,14,2,13,6,15,0,9,10,4,5,3}}\
,{{12,1,10,15,9,2,6,8,0,13,3,4,14,7,5,11},{10,15,4,2,7,12,9,5,6,1,13,14,0,11,3,8},{9,14,15,5,2,8,12,3,7,0,4,10,1,13,11,6},{4,3,2,12,9,5,15,10,11,14,1,7,6,0,8,13}}\
,{{4,11,2,14,15,0,8,13,3,12,9,7,5,10,6,1},{13,0,11,7,4,9,1,10,14,3,5,12,2,15,8,6},{1,4,11,13,12,3,7,14,10,15,6,8,0,5,9,2},{6,11,13,8,1,4,10,7,9,5,0,15,14,2,3,12}}\
,{{13,2,8,4,6,15,11,1,10,9,3,14,5,0,12,7},{1,15,13,8,10,3,7,4,12,5,6,11,0,14,9,2},{7,11,4,1,9,12,14,2,0,6,10,13,15,3,5,8},{2,1,14,7,4,10,8,13,15,12,9,0,3,5,6,11}}};
int P[32]={16,7,20,21,29,12,28,17,1,15,23,26,5,18,31,10,2,8,24,14,32,27,3,9,19,13,30,6,22,11,4,25};
class hexbin//16进制的数转换为2进制的数
{
private:
    char a[26],count,i,j,e;
    int bin[16][4];
public:
    int c[64];
    int*bina(void)
    {
        count=0;
        cout<<"请输入16进制的数：";
        cin>>a;
        for(i=0; a[i]!='\0'; i++)//每个字符对应相应的四位的二进制数
        {
            switch(a[i])
            {
            case'0':
                bin[i][0]=0;
                bin[i][1]=0;
                bin[i][2]=0;
                bin[i][3]=0;
                break;
            case'1':
                bin[i][0]=0;
                bin[i][1]=0;
                bin[i][2]=0;
                bin[i][3]=1;
                break;
            case '2':
                bin[i][0]=0;
                bin[i][1]=0;
                bin[i][2]=1;
                bin[i][3]=0;
                break;
            case '3':
                bin[i][0]=0;
                bin[i][1]=0;
                bin[i][2]=1;
                bin[i][3]=1;
                break;
            case '4':
                bin[i][0]=0;
                bin[i][1]=1;
                bin[i][2]=0;
                bin[i][3]=0;
                break;
            case '5':
                bin[i][0]=0;
                bin[i][1]=1;
                bin[i][2]=0;
                bin[i][3]=1;
                break;
            case '6':
                bin[i][0]=0;
                bin[i][1]=1;
                bin[i][2]=1;
                bin[i][3]=0;
                break;
            case '7':
                bin[i][0]=0;
                bin[i][1]=1;
                bin[i][2]=1;
                bin[i][3]=1;
                break;
            case '8':
                bin[i][0]=1;
                bin[i][1]=0;
                bin[i][2]=0;
                bin[i][3]=0;
                break;
            case '9':
                bin[i][0]=1;
                bin[i][1]=0;
                bin[i][2]=0;
                bin[i][3]=1;
                break;
            case 'A':
                bin[i][0]=1;
                bin[i][1]=0;
                bin[i][2]=1;
                bin[i][3]=0;
                break;
            case 'B':
                bin[i][0]=1;
                bin[i][1]=0;
                bin[i][2]=1;
                bin[i][3]=1;
                break;
            case 'C':
                bin[i][0]=1;
                bin[i][1]=1;
                bin[i][2]=0;
                bin[i][3]=0;
                break;
            case 'D':
                bin[i][0]=1;
                bin[i][1]=1;
                bin[i][2]=0;
                bin[i][3]=1;
                break;
            case 'E':
                bin[i][0]=1;
                bin[i][1]=1;
                bin[i][2]=1;
                bin[i][3]=0;
                break;
            case 'F':
                bin[i][0]=1;
                bin[i][1]=1;
                bin[i][2]=1;
                bin[i][3]=1;
                break;
            default:
                exit(-1);
            }
            count++;
        }
        e=0;
        for(i=0; i<16; i++) //组合成一个数组
        {
            for(j=0; j<4; j++)
            {
                c[e]=bin[i][j];
                e++;
            }
        }
        memset(bin,0,sizeof(int)*64);//重置数组
        memset(a,0,sizeof(char)*26);
        return c;
    }
};
class kborn
{
private:
    int i,j,d[56],C[20][28],D[20][28],a,CD[56],c,b,e;
public:
    int ke[48];
    int*ki(int*F,int n)
    {
        for(i=0;i<56;i++)//64bit密钥进行PC-1置换变为56bit
        {
            d[i]=F[PC[i]-1];
        }
        cout<<"\nPC1置换后得到的结果是：";
        for(i=0;i<56;i++)
        {
            cout<<d[i];
            if((i+1)==28)
                cout<<"\t";
        }
        for(i=0;i<28;i++)//划分成两段每段28bit
        {
            C[0][i]=d[i];
        }
        for(i=28;i<56;i++)
        {
            D[0][i-28]=d[i];
        }
        for(i=1;i<=n;i++)//循环移位
        {
            if(i==1||i==2)//移一位
            {

                a=C[i-1][0];
                c=D[i-1][0];
                for(j=0;j<27;j++)//左循环移位一位
                {
                    C[i][j]=C[i-1][j+1];
                    D[i][j]=D[i-1][j+1];
                }
                C[i][j]=a;
                D[i][j]=c;
            }
            if(i==3)//移两位
            {
                a=C[i-1][0];
                b=D[i-1][0];
                c=C[i-1][1];
                e=D[i-1][1];
                for(j=0;j<26;j++)//左循环移位两位
                {
                    C[i][j]=C[i-1][j+2];
                    D[i][j]=D[i-1][j+2];
                }
                C[i][26]=a;
                D[i][26]=b;
                C[i][27]=c;
                D[i][27]=e;
            }
            cout<<"\n中间的第"<<i<<"轮的56bit密钥是：";
            for(e=0;e<28;e++)
            {
                cout<<C[i][e];
            }
            cout<<"\t";
            for(j=28;j<56;j++)
            {
                cout<<D[i][j-28];
            }
        }
        for(j=0;j<28;j++)//两个28bit合并为一段56比特
        {
            CD[j]=C[i-1][j];
        }
        for(j=28;j<56;j++)
        {
            CD[j]=D[i-1][j-28];
        }
        for(j=0;j<48;j++)//进行PC-2置换生成密钥
        {
            ke[j]=CD[PCr[j]-1];
        }
        return ke;
    }
};
int main()
{
    int i,j,m[64],m1[64],L[20][32],R[20][32],K[20][48],N,EA[48],B[48];
    int hang,lie,C[8],a,b,e,bin[8][4],cc,Pt[32],T[32],CT[64],CTT[64],num[8];
    char nu[8];
    hexbin hbin;
    kborn kefe;
    cout<<"请输入明文：\n";
    int*c=hbin.bina();
    for(i=0; i<64; i++)
    {
        m1[i]=c[i];
    }
    cout<<"\n请输入64bit密钥：\n";
    c=hbin.bina();
    for(i=0; i<64; i++)
    {
        F[i]=c[i];
    }
    cout<<"\n明文转换为64bit为：";
    for(i=0;i<64;i++)
    {
        cout<<m1[i];
    }
    cout<<"\n密钥转换为64bit为：";
    for(i=0;i<64;i++)
    {
        cout<<F[i];
    }
//分成两段每段32bit
    for(i=0;i<32;i++)
    {
        L[0][i]=m1[i];
    }
    for(i=32;i<64;i++)
    {
        R[0][i-32]=m1[i];
    }
    cout<<"\n\nL0=：";
    for(i=0;i<32;i++)
    {
        cout<<L[0][i];
    }
    cout<<"\n\nR0=：";
    for(i=0;i<32;i++)
    {
        cout<<R[0][i];
    }
//进行16轮的迭代
    for(N=1;N<=3;N++)
    {
        int *ke=kefe.ki(F,N);//生成48bit的密钥
        for(i=0;i<48;i++)
        {
            K[N][i]=ke[i];
        }
        cout<<"\n\n生成的第"<<N<<"轮48bit密钥是：";
        for(i=0;i<48;i++)
        {
            cout<<K[N][i];
        }
        for(i=0;i<32;i++)//把下一轮的L求出来
        {
            L[N][i]=R[N-1][i];
        }
        for(i=0;i<48;i++)//将32比特R扩展成48比特
        {
            EA[i]=R[N-1][E[i]-1];
        }
        for(i=0;i<48;i++)//EA和K异或操作
        {
            if(EA[i]==K[N][i])
                B[i]=0;
            else
                B[i]=1;
        }
        for(i=0;i<48;)//求出Ci的值，并化为4bit的值，最终合并为一个32bit
        {
            hang=B[i]*2+B[i+5];
            lie=B[i+1]*8+B[i+2]*4+B[i+3]*2+B[i+4];
            C[i/6]=S[i/6][hang][lie];
            i=i+6;
        }
        for(j=0;j<8;j++)
        {
            e=C[j];
            for(i=0;i<4;i++)//把ASCII值转换为二进制
            {
                b=e/2;
                bin[j][i]=e%2;
                e=b;
                if(e==0)//化到最后都会从2或1化到0
                {
                    for(cc=i+1;cc<4;cc++)//补位添0,成为8bit
                    {
                        bin[j][cc]=0;
                    }
                    break;
                }
            }
        }
        cc=0;
        for(j=0;j<8;j++)//32比特记录到一个数组中
        {
            for(i=3;i>=0;i--)
            {
                Pt[cc]=bin[j][i];
                cc++;
            }
        }
        for(i=0;i<32;i++)//P置换退出f函数
        {
            T[i]=Pt[P[i]-1];
        }
        for(i=0;i<32;i++)//L(i-1)和f函数输出异或操作得到Ri
        {
            if(T[i]==L[N-1][i])
            {
                R[N][i]=0;
            }
            else
            {
                R[N][i]=1;
            }
        }
        cout<<"\n第"<<N<<"次迭代得到的输出是：";
        for(i=0;i<32;i++)
        {
            cout<<L[N][i];
        }
        for(i=0;i<32;i++)
        {
            cout<<R[N][i];
        }
    }
    cout<<endl;
    system("PAUSE");
    return 0;
}
